# vendor/bin/phifty zsh completion script generated by CLIFramework
# Web: http://github.com/c9s/php-CLIFramework
# THIS IS AN AUTO-GENERATED FILE, PLEASE DON'T MODIFY THIS FILE DIRECTLY.
___vendor_bin_phiftymeta () {
  local curcontext=$curcontext state line ret=1
  typeset -A opt_args
  typeset -A val_args
  declare -a lines
  declare -a args
  local ret=1
  local desc=$1
  local cmdsig=$2
  local valtype=$3
  local pos=$4
  local completion=$5
  output=$(vendor/bin/phifty meta --zsh $cmdsig $valtype $pos $completion)
  lines=("${(@f)output}")
  output_type=${lines[1]}
  if [[ $lines[1] == "#groups" ]] ; then
      eval $output
      for tag in ${(k)groups} ; do
          complete_values=(${(z)${groups[$tag]}})
          label=${labels[$tag]}
          if [[ -z $label ]] ; then
              label=$tag
          fi
          _describe -t $tag $label complete_values && ret=0
      done
  elif [[ $lines[1] == "#values" ]] ; then
      args=(${lines:1})
     _values "$desc" ${=args} && ret=0
  elif [[ $lines[1] == "#descriptions" ]] ; then
      args=(${lines:1})
      _describe "$desc" args && ret=0
  else
     _values "$desc" ${=lines} && ret=0
  fi
  return ret
}
_vendor_bin_phifty() {
local curcontext=$curcontext state line
typeset -A opt_args
local ret=1
  _arguments -C \
    '(-v --verbose)'{-v,--verbose}'[Print verbose message.]' \
    '(-d --debug)'{-d,--debug}'[Print debug message.]' \
    '(-q --quiet)'{-q,--quiet}'[Be quiet.]' \
    '(-h --help)'{-h,--help}'[Show help.]' \
    '--version[Show version.]' \
    '(-p --profile)'{-p,--profile}'[Display timing and memory usage information.]' \
    '--log-path[The path of a log file.]' \
    '--no-interact[Do not ask any interactive question.]' \
    ': :->cmds' \
    '*:: :->option-or-argument' \
     && return
  case $state in
    (cmds)
  local commands; commands=(
    help:'Show help message of a command'
    zsh:'This function generate a zsh-completion script automatically'
    bash:'This command generate a bash completion script automatically'
    meta:'Return the meta data of a commands.'
    compile:'compile current source into Phar format library file.'
    archive:'Build executable phar file from composer.json'
    github:build-topics:'Build topic classes from the wiki of a GitHub Project.'
    init:'Initialize phifty project files, directories and permissions.'
    bootstrap:'build bootstrap script'
    export:'Export application/plugin web paths to webroot/.'
    locale:'awesome brief for your app.'
    console:'Simple REPL Console.'
    server:'run http server'
    router:'List routing paths'
    asset:'register and install assets'
    bundle:'bundle commands'
    composer-config:'Build composer config for web application.'
    server-config:'awesome brief for your app.'
    new:'template generator command'
    migration-check:'Checking migration notes'
    check:'awesome brief for your app.'
    cache:clean:'awesome brief for your app.'
  )
  _describe -t commands 'command' commands && ret=0
    ;;
    (option-or-argument)
      curcontext=${curcontext%:*}-$line[1]:
      case $line[1] in
        (help)
            _arguments -w -S -s \
              '--dev[Show development commands]' \
               && ret=0
        
        ;;
        (zsh)
            _arguments -w -S -s \
              '--bind=[bind complete to command]' \
              '--program=[programe name]' \
               && ret=0
        
        ;;
        (bash)
            _arguments -w -S -s \
              '--bind=[bind complete to command]' \
              '--program=[programe name]' \
               && ret=0
        
        ;;
        (meta)
            _arguments -w -S -s \
              '--flat[flat list format. work for both zsh and bash.]' \
              '--zsh[output for zsh]' \
              '--bash[output for bash]' \
              '--json[output in JSON format (un-implemented)]' \
               && ret=0
        
        ;;
        (compile)
            _arguments -w -S -s \
              '--classloader[embed classloader source file]' \
              '--bootstrap[bootstrap or executable source file]' \
              '--executable[is a executable script ?]' \
              '--lib=[library path]' \
              '--include=[include path]' \
              '--exclude=[exclude pattern]' \
              '--output=[output]' \
              '(-c --compress)'{-c,--compress}'[phar file compress type\: gz, bz2]' \
              '--no-compress[do not compress phar file.]' \
               && ret=0
        
        ;;
        (archive)
            _arguments -w -S -s \
              '(-d --working-dir)'{-d,--working-dir=}'[If specified, use the given directory as working directory.]:dir:_directories' \
              '(-c --composer)'{-c,--composer=}'[The composer.json file. If --working-dir is ignored, dirname of the composer.json will be used.]:file:_files' \
              '--vendor=[Vendor directory name]' \
              '--bootstrap[bootstrap or executable php file]:file:_files' \
              '--executable[make the phar file executable]:boolean' \
              '(-c --compress)'{-c,--compress}'[compress type\: gz, bz2]::("gz" "bz2")' \
              '--no-compress[do not compress phar file.]' \
              '--add=[add a path respectively]' \
              '--exclude=[exclude pattern]' \
              '--no-classloader[do not embed a built-in classloader in the generated phar file.]' \
              '--app-bootstrap[Include CLIFramework bootstrap script.]' \
              ':phar-file' \
               && ret=0
        
        ;;
        (github:build-topics)
            _arguments -w -S -s \
              '--ns=[Class namespace]' \
              '--dir=[Output directory]' \
              '--update[Update wiki repository]' \
              ':user' \
              ':repo' \
               && ret=0
        
        ;;
        (init)
            _arguments -w -S -s \
              '--system[use system commands]' \
               && ret=0
        
        ;;
        (bootstrap)
            _arguments -w -S -s \
              '(-c --clean)'{-c,--clean}'[clean up generated files.]' \
              '(-e --env)'{-e,--env=}'[environment]:string' \
              '(-x --xhprof)'{-x,--xhprof}'[enable xhprof profiler in the bootstrap file.]' \
              '(-o --output)'{-o,--output=}'[output file]:string' \
               && ret=0
        
        ;;
        (export)
        
        ;;
        (locale)
            _arguments -C \
              '(-f --force)'{-f,--force}'[force]' \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              parse:'parse and update message catalogs.'
              update:'compile message files'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (parse)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force]' \
                           && ret=0
                  
                  ;;
                  (update)
                        _arguments -w -S -s \
                          '(-f --force)'{-f,--force}'[force]' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (console)
        
        ;;
        (server)
            _arguments -w -S -s \
              '(-h --host)'{-h,--host=}'[host]' \
              '(-p --port)'{-p,--port=}'[port]' \
               && ret=0
        
        ;;
        (router)
        
        ;;
        (asset)
            _arguments -C \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              init:'awesome brief for your app.'
              list:'awesome brief for your app.'
              install:'awesome brief for your app.'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (init)
                  
                  ;;
                  (list)
                  
                  ;;
                  (install)
                        _arguments -w -S -s \
                          '(-l --link)'{-l,--link}'[use symbolic link]' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (bundle)
            _arguments -C \
              ': :->cmds' \
              '*:: :->option-or-argument' \
               && return
            case $state in
              (cmds)
            local commands; commands=(
              get:'get bundle'
              sync:'get bundle'
              install:'install bundles'
            )
            _describe -t commands 'command' commands && ret=0
              ;;
              (option-or-argument)
                curcontext=${curcontext%:*}-$line[1]:
                case $line[1] in
                  (get)
                        _arguments -w -S -s \
                          '(-t --target-dir)'{-t,--target-dir=}'[target directory for finding, storing bundle directories]' \
                          ':clone url' \
                           && ret=0
                  
                  ;;
                  (sync)
                        _arguments -w -S -s \
                          '(-t --target-dir)'{-t,--target-dir=}'[target directory for finding, storing bundle directories]' \
                          '--rebase[rebase changes]' \
                          ':clone url' \
                           && ret=0
                  
                  ;;
                  (install)
                        _arguments -w -S -s \
                          '(-t --target-dir)'{-t,--target-dir=}'[target directory for finding, storing bundle directories]' \
                           && ret=0
                  
                  ;;
                esac
                ;;
              esac
        
        ;;
        (composer-config)
        
        ;;
        (server-config)
            _arguments -w -S -s \
              '--apache2[]' \
              '--nginx[]' \
              '--fastcgi=[fastcgi socket]:string' \
               && ret=0
        
        ;;
        (new)
        
        ;;
        (migration-check)
        
        ;;
        (check)
        
        ;;
        (cache:clean)
        
        ;;
      esac
      ;;
    esac

return ret
}
compdef _vendor_bin_phifty phifty
